import Foundation

enum Instruction: Int {
    case halt, clrr, clrx, clrm, clrb, movir, movrr, movrm, movmr, movxr, movar, movb, addir, addrr, addmr, addxr, subir, subrr, submr, subxr, mulir, mulrr, mulmr, mulxr, divir, divrr, divmr, divxr, jmp, sojz, sojnz, aojz, aojnz, cmpir, cmprr, cmpmr, jmpn, jmpz, jmpp, jsr, ret, push, pop, stackc, outci, outcr, outcx, outcb, readi, printi, readc, readln, brk, movrx, movxx, outs, nop, jmpne
}

func charToAscii(_ c: Character) -> Int {
    return Int(String(c).utf8.first!)
}

func AsciiToChar(_ n: Int) -> Character {
    return Character(UnicodeScalar(n)!)
}

func readTextFile(_ path: String) -> (message: String?, fileText: String?) {
    let text: String
    do {
        text = try String(contentsOfFile: path, encoding: String.Encoding.utf8)
    }
    catch {
        return ("\(error)", nil)
    }
    return (nil, text)
}

func writeTextFile(_ path: String, data: String) -> String? {
    let url = NSURL.fileURL(withPathComponents: [path])
    do {
        try data.write(to: url!, atomically: true, encoding: String.Encoding.utf8)
    } catch let error as NSError {
        return "Failed writing to URL: \(String(describing: url)), Error: " + error.localizedDescription
    }
    return nil
}

func getNewLine() -> [String] {
    let input = readLine(strippingNewline: true)
    let splitString = splitStringIntoParts(expression: input!)
    return splitString
    
}

func splitStringIntoLines(expression: String) -> [String] {
    return expression.characters.split{ $0 == "\n"}.map{ String($0) }
}

func splitStringIntoParts(expression: String) -> [String] {
    return expression.characters.split{ $0 == " "}.map{ String($0) }
}
