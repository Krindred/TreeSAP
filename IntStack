import Foundation

struct IntStack: CustomStringConvertible {
    var stack: [Int]
    var head: Int
    
    init(size: Int) {
        stack = [Int](repeating: 0, count: size)
        head = -1
    }
    
    func isEmpty() -> Bool {
        if head == -1 {
            return true
        } else {
            return false
        }
    }
    
    func isFull() -> Bool {
        if head + 1 == stack.count {
            return true
        } else {
            return false
        }
    }
    
    mutating func push(_ element: Int) {
        if !isFull() {
            head += 1
            stack[head] = element
        }
    }
    
    mutating func pop() -> Int? {
        if !isEmpty() {
            let result = stack[head]
            head -= 1
            return result
        } else {
            return nil
        }
    }
    
    var description: String {
        var desc = ""
        
        if isEmpty() {
            return "[]"
        }
        
        for i in 0...head {
            if i == head {
                desc += "[\(stack[i])] "
            } else {
                desc += "\(stack[i]) "
            }
        }
        return desc
    }
}
